version: '3'
services:
  watched-aspnet-run:
    # Uncomment the next line to use a non-root user for all processes. You can also
    # simply use the "remoteUser" property in devcontainer.json if you just want VS Code
    # and its sub-processes (terminals, tasks, debugging) to execute as the user. On Linux,
    # you may need to update USER_UID and USER_GID in .devcontainer/Dockerfile to match your
    # user if not 1000. See https://aka.ms/vscode-remote/containers/non-root for details.
    # user: vscode
    build: 
      context: .
      dockerfile: Dockerfile
    image: docker.pkg.github.com/vtrifonov-esfiddle/aspnet-react-container/aspnet-react-base:dev

    volumes:
      # Update this to wherever you want VS Code to mount the folder of your project
      - ..:/app:cached
      - node_modules:/app/src/ClientApp/node_modules/
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      dev-net:
    container_name: aspnet-react-container.dev
    command: /bin/sh -c "dotnet restore && while sleep 1000; do :; done"
    environment:
      - WATCHED_REACT_URI=http://watched-react-run:3000/
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - watched-react-run
    working_dir: /app/src
  watched-react-run:   
    image: node:12

    volumes:
      # Update this to wherever you want VS Code to mount the folder of your project
      - ../src/ClientApp:/app/src/ClientApp:cached
      - node_modules:/app/src/ClientApp/node_modules/
    networks:
      dev-net:
    ports: 
      - 45001:3000
    container_name: react-container.dev
    working_dir: /app/src/ClientApp
    command: /bin/sh -c "npm ci && npm start"
    environment:
      - NODE_ENV=development
      # necessary for to react hot module reload to pick up watched source changes done outside the docker container
      # https://github.com/paulmillr/chokidar#performance
      #- CHOKIDAR_USEPOLLING=true
      #- CHOKIDAR_INTERVAL=1000
networks:
  dev-net:
volumes:
  node_modules:



